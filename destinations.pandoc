
<div class='fullscreen'>
<a href='https://lambdacube3d.wordpress.com/'>
<img src='/lclogo.png' />
</a>
</div>

<div align='center'>

This page is work in progress. Please do not share now.

♦  

In 2015 we are going to a tour of Europe presenting LambdaCube 3D.

</div>

About LambdaCube 3D
===================

Computer graphics programming is a complex task. This complexity is usually hidden inside of graphics engines. Most of these frameworks, however, place limitations on the graphics algorithms that can be formulated in them. An alternative approach is to build a DSL (Domain Specific Language) which provides access to all OpenGL features. A single unified language is used in place of the OpenGL API and GLSL. This unified language improves code reusability and guarantees correctness by compile-time checks. The user can thus focus on creativity instead of the technical details.


LambdaCube 3D components
------------------------

-   DSL for GPU graphics programming
    -   targets the whole graphics pipeline
    -   automatic GPU resource management
    -   strict static type system guarantees all constraints in OpenGL specification
-   Integrated Development Environment
    -   context sensitive editor
        -   syntax highlighting
        -   error highlighting
        -   jump to definitions
        -   completion
    -   helpful error messages
    -   instant visual feedback
    -   code hot swapping
-   Supported platforms
    -   desktop
    -   browser
-   Documentation
    -   tutorial with exercises
    -   demos
    -   DSL specification


Presentations
=============

-   Overview of LambdaCube 3D components (approx. 20 min)
-   Live coding demo (approx. 20 min)
-   Coding dojo (bring your laptop!) (approx. 40 min)


Presenters
----------

Csaba Hruska
:   Csaba is a enthusiastic Haskell programmer. He likes to experiment with cutting edge technologies usually doing it in open source collaboration.

Péter Diviánszky
:   Detto


Destinations
------------

<div align='center'>

<iframe src='https://www.google.com/maps/embed?pb=!1m115!1m8!1m3!1d9409055.83025079!2d3.342443612500011!3d54.84791795891814!3m2!1i1024!2i768!4f13.1!4m104!1i0!3e0!4m5!1s0x4741c334d1d4cfc9%3A0x400c4290c1e1160!2sBudapest!3m2!1d47.497912!2d19.040235!4m5!1s0x479e75f9a38c5fd9%3A0x10cb84a7db1987d!2sMunich%2C+Germany!3m2!1d48.1351253!2d11.5819806!4m5!1s0x47900b9749bea219%3A0xe66e8df1e71fdc03!2sZurich%2C+Switzerland!3m2!1d47.3686498!2d8.539182499999999!4m5!1s0x47e66e1f06e2b70f%3A0x40b82c3688c9460!2sParis%2C+France!3m2!1d48.856614!2d2.3522219!4m5!1s0x47d8a00baf21de75%3A0x52963a5addd52a99!2sLondon%2C+UK!3m2!1d51.5073509!2d-0.1277583!4m5!1s0x47d8774ed42712a9%3A0x21ca80abf36db5bb!2sUniversity+of+Cambridge%2C+The+Old+Schools%2C+Trinity+Lane%2C+Cambridge+CB2+1TN%2C+United+Kingdom!3m2!1d52.204266999999994!2d0.114908!4m5!1s0x487832d2390779cd%3A0x108063201919db15!2sNottingham%2C+UK!3m2!1d52.954783199999994!2d-1.1581086!4m5!1s0x47d8a00baf21de75%3A0x52963a5addd52a99!2sLondon%2C+UK!3m2!1d51.5073509!2d-0.1277583!4m5!1s0x47c66f4339d32d37%3A0xd6c8fc4c19af4ae9!2sUtrecht%2C+Netherlands!3m2!1d52.090737399999995!2d5.1214201!4m5!1s0x47a84e373f035901%3A0x42120465b5e3b70!2sBerlin%2C+Germany!3m2!1d52.520006599999995!2d13.404954!4m5!1s0x4652533c5c803d23%3A0x4dd7edde69467b8!2sCopenhagen%2C+Denmark!3m2!1d55.676096799999996!2d12.568337099999999!4m5!1s0x464f8e67966c073f%3A0x4019078290e7c40!2sGothenburg%2C+Sweden!3m2!1d57.70887!2d11.97456!4m5!1s0x465f763119640bcb%3A0xa80d27d3679d7766!2sStockholm%2C+Sweden!3m2!1d59.329323499999994!2d18.0685808!4m5!1s0x46920bc796210691%3A0xcd4ebd843be2f763!2sHelsinki%2C+Finland!3m2!1d60.1733244!2d24.941024799999997!4m5!1s0x46eecfb0e5073ded%3A0x400cfcd68f2fe30!2zUsSrZ2EsIExhdHZpYQ!3m2!1d56.9496487!2d24.105186399999997!4m5!1s0x471ecc669a869f01%3A0x72f0be2a88ead3fc!2sWarsaw%2C+Poland!3m2!1d52.2296756!2d21.012228699999998!4m5!1s0x4741c334d1d4cfc9%3A0x400c4290c1e1160!2sBudapest!3m2!1d47.497912!2d19.040235!5e0!3m2!1sen!2shu!4v1429609876683' width='600' height='450' frameborder='0' style='border:0'></iframe>

</div>

City          Date                            Organisation + event link
------------- ------------------------------- ---------------------------------
Budapest      Monday, May 20, 7:00 PM         [Budapest Haskell User Group](http://www.meetup.com/Bp-HUG/events/222319555/)
Munich        Wednesday, May 27, 7:00 PM      [Munich-Lambda](http://www.meetup.com/Munich-Lambda/events/221749406/)
Zurich        May 29 - May 31                 [ZuriHack 2015](https://wiki.haskell.org/ZuriHac2015) -- [Projects](https://wiki.haskell.org/ZuriHac2015/Projects)
Paris         Tuesday, June 2, 7:00 PM        [Functional Programmers Paris](http://www.meetup.com/Functional-Progammers-Paris/events/221724469/)
London        June 5, 7:00 PM                 [London Haskell](http://www.meetup.com/London-Haskell/events/222368229/)
Cambridge     June 10, 7:00 PM                [Cambridge NonDysFunctional Programmers](http://www.meetup.com/Cambridge-NonDysFunctional-Programmers/events/222413312/)
Nottingham    June 12, 7:00 PM                School of Computer Science
Sheffield     June 13 or 14
London (2)    Wednesday, June 17              [Mobile and Games Dev](http://www.meetup.com/mobiledev/events/222379529/)
Amsterdam     June 20 or 21
*Utrecht*     *June 22*                       *Stop for a coffee?*
*Nijmegen*    *June 22*                       *Stop for a coffee?*
Berlin        June 23, 24 or 25
Copenhagen    June 27, 28 or 29
Göteborg      July 1 or 2
Stockholm     July 4 or 5
Helsinki      July 7, 8 or 9
------------- ------------------------------- ---------------------------------

Maybe: Tallinn, Riga, Vilnius, Warsaw, Kraków, Bratislava


Links
=====

-   [GitHub repository](https://github.com/csabahruska/lc-dsl/tree/master/lambdacube-dsl)
-   [WordPress blog](https://lambdacube3d.wordpress.com/)


Questions & answers
===================

What is the LambdaCube 3D project licence?
------------------------------------------

The whole project is licenced under BSD3.

Haskell related questions
-------------------------

### How LambdaCube 3D is related to Haskell?

The LambdaCube 3D language is specified [compared to Haskell98](#language-specification).

There is a Haskell EDSL too, but we focus development on the DSL now.


### Why LambdaCube 3D is focusing now on a DSL instead of a Haskell EDSL as before?

We know that this question may be sensitive to Haskell programmers.
As we present LambdaCube 3D for lots of Haskell communities during our tour,
we discuss the question in detail.

Pros

-   syntax
    -   ordinary Haskell functions syntax can be used for shader descriptions
        -   counterargument: also possible with quasiquoting, although at the expense of some syntactic noise
    -   syntactic sugar for swizzling
        -   counterargument: also possible with quasiquoting, although at the expense of some syntactic noise
-   type system
    -   domain specific error messages
    -   interactive explanations of errors
    -   row polymorphism
        -   counterargument: this may be done with a GHC constraint solver plugin
-   runtime system
    -   should be available in several platforms (in the browser too)
        -   counterargument: could be solved by replacing the GHC runtime only
    -   small compiled binaries
    -   more control on evaluation order
        -   counterargument: could be solved by replacing the GHC runtime only
    -   more control on garbage collection
        -   counterargument: could be solved by replacing the GHC runtime only
-   other
    -   easier to experiment with new features
    -   be lightweight (run also the compiler in the browser)
    -   more control on sharing of subexpressions
        -   counterargument: there are several techniques to solve this, but none of them was fully working in our case

Cons

-   a new language to learn (for a Haskell programmer)
    -   but trying to be close to Haskell loosens this argument
-   cannot freely mix LambdaCube3D and Haskell in the same module
    -   but trying to be close to Haskell loosens this argument
-   cannot freely mix LambdaCube3D with existing Haskell libraries
    -   but providing a Haskell FFI in LambdaCube 3D loosens this argument
-   missing GHC toolset (profiling tools, cabal, ...)
-   missing GHC features (?)
-   maintenance costs of a separate parser, type checker and runtime system  
    Remark: we pay this costs as we go, so the argument is that we might have a fully working system later than with an EDSL - we don't think that this is the case though

Conclusion

As Csaba spent significant time already with experimenting with a Haskell EDSL,
we switch focus now to experiment with a proper DSL. The option is always there
to backport the DSL's innovations to the Haskell EDSL.


Overview of LambdaCube 3D components
====================================

-   editor
-   parser  --> errors to editor
-   type checker (scope checking included)  -->  System-F to reducer  --> errors & type info to editor
-   reducer
-   byte code generator (CPU, GPU)
-   byte code interpreter for each backend


Live coding
===========


Tutorial
========

This going to be inteactive.


Coding dojo exercises
=====================


Language specification
======================

Basically LambdaCube 3D is [Haskell98](https://www.haskell.org/onlinereport/) + various language extensions.

-   Haskell98 features
    -   Type classes
    -   ...
-   Missing/omitted Haskell98 features
    -   N+k patterns, see [`NoNPlusKPatterns`](https://ghc.haskell.org/trac/haskell-prime/wiki/NoNPlusKPatterns)
    -   Monomorphism restriction, see [`NoMonomorphismRestriction`](https://ghc.haskell.org/trac/haskell-prime/wiki/NoMonomorphismRestriction)
    -   [Different Prelude](#prelude)
    -   ...
-   Diversions from Haskell98
    -   Mutual definitions should be marked explicitly \*
    -   Definitions should be ordered bottom-up \*
    -   ...
-   GHC extensions
    -   `ScopedTypeVariables`, see [Lexically scoped type variables](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/other-type-extensions.html#scoped-type-variables)
    -   `PolyKinds` and `DataKinds`, see [Kind polymorphism and promotion](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/kind-polymorphism-and-promotion.html) -- *WIP*
    -   [Type families](https://wiki.haskell.org/GHC/Type_families)
    -   ...
-   Planned GHC extensions
    -   [`TypeApplication`](https://ghc.haskell.org/trac/ghc/wiki/TypeApplication)  -- *Done*
-   Other extensions
    -   Raw polymorphism -- *Done*
    -   [Swizzling](http://en.wikipedia.org/wiki/Swizzling_%28computer_graphics%29) -- *TODO*
    -   Type error specialisation
-   Other diversions from GHC
    -   ...

Note    Explanation
------- ---------------
\*      Not essential restriction (can be lifted in the future)
*Done*  Done
*WIP*   Work In Progress
*TODO*  We think we know how to do this, needs time
------- ---------------


Prelude
-------




Background
==========

History:

Ogre Haskell implementation (read files, graphics in IO monads)  
-> Haskell EDSL (shader reuse and composition)  
-> Haskell EDSL (strong static typing of constraints)  
-> Haskell EDSL (rewrite after gpipe inspiration but with better context handling)  
(pipline description and pipline input is separated)  
-> DSL

Team:

Csaba, Gergő, Divip

Motivations:

-   Compilers, functional programming & graphics
-   Use cutting edge theory in industry
-   Open minded collaboration

Vision:

-   close to nature work environment


Participation
=============

Starting with [ZuriHac2015](https://wiki.haskell.org/ZuriHac2015/Projects), we are
open to collaboration.
We are happy to share several tasks you can working on, either at ZuriHack or from anywhere in you spare time.

Notes:
We prefer content licensed under BSD3.
When you share content with us not licenced under BSD3, please notify us.

Tasks
-----

-   Add or improve demos
-   Improve documentation
-   Compiler
    -   ...
-   ...

Please report bugs at the corresponding GitHub repositories.


Contact us
==========

![](csabaemail.png)  
![](divipemail.png)



