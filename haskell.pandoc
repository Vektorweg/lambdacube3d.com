%Language Specification

Overview
========

LambdaCube 3D is specified as [Haskell98](https://www.haskell.org/onlinereport/) plus various language extensions.

Haskell98 language features
---------------------------

-   patterns
    -   variable, constructor, wildcard -- *Done*
    -   tuple, list -- *Done*
    -   at-pattern -- *Done*
    -   irrefutable pattern -- *TODO*
-   expressions
    -   variable, constructor, application, lambda, case, if -- *Done*
    -   let -- *WIP*
    -   type signature -- *Done*
    -   tuples, lists -- *Done*
    -   list comprehensions -- *Done*
    -   dot-dot expressions -- *WIP*
    -   do syntax -- *TODO*
    -   operators, fixity declarations -- *Done*
-   definitions
    -   value definition, function, function alternative, guard, where-block -- *Done*
    -   mutual recursion -- *TODO*
    -   type signature -- *WIP*
    -   data declarations -- *Done*
    -   newtype declarations -- *TODO*
    -   type synonyms -- *TODO*
    -   type classes -- *WIP*
        -   defaulting -- *TODO*
        -   deriving -- *TODO*
-   modules
    -   module imports and export lists -- *WIP*

There are some diversions from Haskell98. Our plan is to keep this list very short.

-   [Different Prelude](#prelude)  -- *WIP*
-   Definitions should be ordered bottom-up  -- \* 

Notes
------- ---------------
\*      Not essential restriction (will be lifted)
*Done*  Done
*WIP*   Work In Progress
*TODO*  We think we know how to do this, needs time
------- ---------------


Extentions compared to Haskell98
--------------------------------

These extensions are automatically enabled.

### Registered extensions

-   [`NoMonomorphismRestriction`](https://ghc.haskell.org/trac/haskell-prime/wiki/NoMonomorphismRestriction) -- *Done*
-   [`NoNPlusKPatterns`](https://ghc.haskell.org/trac/haskell-prime/wiki/NoNPlusKPatterns)  -- *Done*
-   [`TypeApplication`](https://ghc.haskell.org/trac/ghc/wiki/TypeApplication)  -- *Done*
-   `KindSignatures` -- *Done*
-   [`EmptyDataDecls`](https://ghc.haskell.org/trac/haskell-prime/wiki/EmptyDataDecls) -- *TODO*
-   [`PolyKinds` & `DataKinds`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/kind-polymorphism-and-promotion.html) -- *WIP*
-   [`GADTs`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/data-type-extensions.html#gadt) (includes `ExistentialQuantification`) -- *WIP*
-   [`TypeFamilies`](https://wiki.haskell.org/GHC/Type_families) -- *WIP*
-   [`PartialTypeSignatures`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/partial-type-signatures.html) -- *WIP*
-   [`ScopedTypeVariables`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/other-type-extensions.html#scoped-type-variables) -- *TODO*
-   [`RankNTypes`](https://ghc.haskell.org/trac/haskell-prime/wiki/RankNTypes) -- *TODO*
-   [Typed holes](https://wiki.haskell.org/GHC/Typed_holes) -- *TODO*
-   [`LambdaCase`](https://ghc.haskell.org/trac/haskell-prime/wiki/LambdaCase) -- *TODO*
-   `LANGUAGE` pragmas
    -   `NoImplicitPrelude` -- *Done*

### Other extensions

-   [Raw polymorphism](#row-polymorphism) -- *Done*
-   [Swizzling](#swizzling) -- *WIP*
-   `ImplicitParams` -- *WIP*
-   Compositional typing -- *Done*
-   Type error specialisation -- *TODO*


Prelude
=======

[The current Prelude](https://github.com/csabahruska/lc-dsl/blob/master/lambdacube-dsl/tests/accept/Prelude.lc)


Row polymorphism
================

A.k.a. structural records.  
Row polymorphism is implemented following [Edward Kmett's presentation on Ermine](http://ekmett.github.io/presentations/Functional%20Reporting.pdf).

~~~~~~~~ {.haskell}
v1 = {x: 1.0, y: 2.0, z: 3.0}
v2 = {x: 1.0, y: 2.0, z: 3.0, a: 4.0}

f v = v.x +! v.y

r = f v1 +! f v2    -- this is valid
~~~~~~~~


Swizzling
=========

Swizzling means rearranging the elements of a vector.[^swizzling]

~~~~~~~~ {.haskell}
(V3 1.0 2.0 3.0)%xxzy   ==   V4 1.0 1.0 3.0 2.0
~~~~~~~~

The letters `x`, `y`, `z` and `w` refers to the 1st, 2nd, 3rd and 4th element of a record, respectively.  
It is also possible to use the letters `r`, `g`, `b` and `a` instead of `x`, `y`, `z` and `w`.

[^swizzling]: [Wikipedia article](http://en.wikipedia.org/wiki/Swizzling_%28computer_graphics%29)


Compositional typing
====================

Compositional typing improves error messages.
Compositional typing can be seen as a language extension if we suppose that a language description provide information about
ill-typed programs too.

Gergő Érdi's master thesis: [Compositional Type Checking for Hindley-Milner Type Systems with Ad-hoc Polymorphism](http://gergo.erdi.hu/projects/tandoori/Tandoori-Compositional-Typeclass.pdf)


